#**********************************
#
# Copyright (c) 1994-2025 SIL Global (https://www.sil.org)
# Released under the MIT License (https://opensource.org/licenses/MIT)
#
#**********************************


#**********************************
#  Language Systems
#**********************************

languagesystem DFLT dflt ;
languagesystem syrc dflt ; # Syriac default
languagesystem syrc SYR ; # Eastern Syriac
languagesystem syrc SYRN ; # Eastern Syriac
languagesystem latn dflt ;

@MarksAbove = [@_above @_aboveleft] ; # _diaA
@MarksBelow = [ @_below @_belowleft] ; # _diaB @_b.U0740 @_b.U0325_3
@MarksAny = [@MarksAbove @MarksBelow] ;

# Notes:
#   The lookups and then the features should be arranged and grouped into ordered passes
#   as the rendering engines (esp Harfbuzz) will execute them.
#   The boundaries between passes are indicated by the comment
#       # HB PAUSE
#   in the code.


#**********************************
# GSUB (Substitution) lookups
#**********************************

#---  rtlm feature  ---

lookup Mirror {
  lookupflag IgnoreMarks ;
    sub @cno_rtl by @c_rtl ;
} Mirror ;

# HB PAUSE

#---  ccmp feature  ---

# Font rendering check
#
# The following three lookups change "RenderingUnknown" to "RenderingOpenType"

lookup _FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} _FontCheck_Unknow ;

lookup _FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} _FontCheck_n ;

lookup FontCheck {
  lookupflag IgnoreMarks ;
    sub [R] e n d e r i n g
      U' lookup _FontCheck_Unknow
      n' lookup _FontCheck_Unknow
      k' lookup _FontCheck_Unknow
      n'
      o' lookup _FontCheck_Unknow
      w' lookup _FontCheck_Unknow
      n' lookup _FontCheck_n;
} FontCheck ;

# Replace Syriac punctuation glyphs with Latin ones:
do let f = info("familyName");
   if f.find("Ramsina") != -1 ; {

lookup LatinPunctuation {
  lookupflag 0 ;
    sub @Punct by @Punct_latn ;
} LatinPunctuation ;
}   #end do - Ramsina

# Replace Syriac punctuation glyphs with Latin ones:
do let f = info("familyName");
   if f.find("Idiqlat") != -1 ; {

lookup LatinPunctuation {
  lookupflag 0 ;
#    sub @Punct by @Punct_latn ;
} LatinPunctuation ;
}   #end do - Idiqlat

# HB PAUSE

#---  fina feature  ---

lookup ltrFina {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkFina ;
    sub @RightLinkIsol by  @RightLinkFina ;
    sub alaph-syriac by alaph-syriac.fina ;
} ltrFina ;

# HB PAUSE

#---  medi feature  ---

lookup ltrMedi {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkMedi ;
} ltrMedi ;

# HB PAUSE

#---  init  feature  ---

lookup ltrInit {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkInit ;
} ltrInit ;

# HB PAUSE

# This one decomposes U+073C into above and below counterparts
lookup DecomposePthahadotted {
    sub pthahadotted-syriac by hbasaEsasadotted-syriac rwaha-syriac;
} DecomposePthahadotted ;

# HB PAUSE

# This is the Seyame where the rish looses its dot when a dieresis is above it
lookup Seyame {
    sub rish-syriac by dalathrishDotless-syriac ;
} Seyame ;

lookup SeyameChain {
# GSUB lookup 2, type 16 (Chaining Context)
  sub rish-syriac' lookup Seyame dieresiscomb @MarkBelowCanChain;
  sub rish-syriac' lookup Seyame @MarkBelowCanChain dieresiscomb;
# Added the following also
  sub rish-syriac' lookup Seyame dieresiscomb @MarkAboveCanChain;
  sub rish-syriac' lookup Seyame @MarkAboveCanChain dieresiscomb;
} SeyameChain;

# IS THIS NEEDED???
# Used in East Syriac, West Syriac, Estrangela
lookup RishSeyame { # 072A 0308
    sub rish-syriac dieresiscomb by  rish_dieresiscomb-syriac ;
    sub rish-syriac.fina dieresiscomb by  rish_dieresiscomb-syriac.fina ;
} RishSeyame ;

# HB PAUSE

# ligature rule because small dots is next to big dot
# glyph for replacement seems poorly named except 073c and 0742 are similar
lookup DalathRukkakha { # 0715 0742 r3
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub dalath-syriac rukkakha-syriac by dalath_hbasaEsasadotted-syriac ;
    sub dalath-syriac.fina rukkakha-syriac by dalath_hbasaEsasadotted-syriac.fina ;
  }
} DalathRukkakha ;

# HB PAUSE

# Can have up to 3 music-syriac but they need to be a tight ligature
lookup MusicLigatures {
  lookupflag MarkAttachmentType @MusicLigatureParts ;
    sub music-syriac music-syriac  by  music2-syriac ;
    sub music-syriac music-syriac music-syriac by  music3-syriac ;
} MusicLigatures ;

# HB PAUSE

# The breve below must almost touch
lookup PeBreveBelow { # 0715 0742
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub pe-syriac brevebelowcomb by pe_brevebelowcomb-syriac ;
    sub pe-syriac.init brevebelowcomb by pe_brevebelowcomb-syriac.init ;
    sub pe-syriac.medi brevebelowcomb by pe_brevebelowcomb-syriac.medi ;
    sub pe-syriac.fina brevebelowcomb by pe_brevebelowcomb-syriac.fina ;
  }
} PeBreveBelow ;

# HB PAUSE

lookup square1 {
# GSUB lookup 18, type 11 (Single)
  lookupflag RightToLeft;
  sub rukkakha-syriac by rukkakha-syriac.square;
} square1;

# Add a test!
lookup RukkakhaSquare {
# GSUB lookup 14, type 16 (Chaining Context)
  lookupflag RightToLeft;
  sub @TakeRukkakhaSquare rukkakha-syriac' lookup square1;
} RukkakhaSquare;

# HB PAUSE

# HB PAUSE


# Added this because we need a ligature before doing character variant
# Used in East Syriac and Estrangela
lookup TawAlaph { # 072C 0710 
  lookupflag IgnoreMarks ;
    sub taw-syriac.fina alaph-syriac.fina by taw_alaph-syriac.fina; # ???
    sub taw-syriac.fina alaph-syriac.fin2 by taw_alaph-syriac.fina;
#    sub taw-syriac alaph-syriac by taw_alaph-syriac; # ()
    sub taw-syriac alaph-syriac.fin2 by taw_alaph-syriac ;  # isolate (4)
} TawAlaph ;

# HB PAUSE

# =======================
# Rule 1
# This just helps remember what the forms of alaph are:
#      alaph-syriac is isolate with no tail
#      alaph-syriac.med2 is final with no tail
#      alaph-syriac.fin2 is isolate with tail
#      alaph-syriac.fina is final with tail
#      alaph-syriac.fin3 is final with no tail

lookup ltrFinaSerOlaph { # use when the preceding base character cannot be joined to, and that preceding base character is not a 'Dalath', 'Rish', or dotless 'Dalath-Rish'
  lookupflag IgnoreMarks ;
    sub alaph-syriac  by  alaph-syriac.fin2 ;
} ltrFinaSerOlaph ;

lookup ltrMediOlaph { # used in the middle of Syriac words when the preceding base character can be joined to it.
  lookupflag IgnoreMarks ;
    sub alaph-syriac  by  alaph-syriac.med2 ;
} ltrMediOlaph ;

lookup ltrFinaESyOlaph { # used when the preceding base character is a 'Dalath', 'Rish', or dotless 'Dalath-Rish'.
  lookupflag IgnoreMarks ;
    sub alaph-syriac  by  alaph-syriac.fin3 ;
} ltrFinaESyOlaph ;

# =======================
# Rule 2

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

lookup LamAlaphLig_Alaph { # corresponds to "Rule 2" and "Rule 6"
# GSUB lookup 18, type 11 (Single)
  lookupflag 0;
    sub alaph-syriac by alaph-syriac.ccmp;
} LamAlaphLig_Alaph;

# Used in East Syriac, West Syriac, Estrangela
lookup LamAlaphLig { # corresponds to "Rule 2" and "Rule 6"
# GSUB lookup 3, type 16 (Chaining Context)
  lookupflag 0;
    sub lamadh-syriac @TypeMark alaph-syriac' lookup LamAlaphLig_Alaph;
    sub lamadh-syriac @TypeMark @TypeMark alaph-syriac' lookup LamAlaphLig_Alaph;
    sub lamadh-syriac alaph-syriac' lookup LamAlaphLig_Alaph;
} LamAlaphLig;
}   #end do - Idiqlat|Ramsina

do let f = info("familyName");
   if f.find("Khabur") != -1; {

lookup LamAlaphLig { # Estrangela
# GSUB lookup 3, 
  lookupflag IgnoreMarks;
    sub lamadh-syriac alaph-syriac by lamadh_alaph-syriac;
    sub lamadh-syriac alaph-syriac.fina by lamadh_alaph-syriac;
    sub lamadh-syriac.medi alaph-syriac.fina by lamadh_alaph-syriac.fina;
    sub lamadh-syriac.medi alaph-syriac.med2 by lamadh_alaph-syriac.fina;
} LamAlaphLig;
} #end do - Khabur

lookup AlaphChain {
# GSUB lookup 19, type 11 (Single)
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub alaph-syriac.ccmp by alaph-syriac;
  }
} AlaphChain;

lookup AlaphChainMed2 {
# GSUB lookup 19, type 11 (Single)
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub alaph-syriac.ccmp by alaph-syriac.med2;
  }
} AlaphChainMed2;

lookup AlaphLigs {
# GSUB lookup 4, type 16 (Chaining Context)
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub alaph-syriac.ccmp' lookup AlaphChain @TypeMark;
    sub alaph-syriac.ccmp' lookup AlaphChain yudh-syriac ;
    sub alaph-syriac.ccmp' lookup AlaphChain waw-syriac ;
    sub alaph-syriac.ccmp' lookup AlaphChainMed2 @DualJoining ;
  }
} AlaphLigs;

# This is needed because of the isolate form not looking like a final form, and this is viewed as a final even since it's after a right joining character
lookup cv_fina {
  lookupflag IgnoreMarks RightToLeft;
sub [kaph-syriac mim-syriac nun-syriac] by [kaph-syriac.cv15 mim-syriac.cv17 nun-syriac.cv18];
} cv_fina ;

lookup RightJoinFinaAlt {
# GSUB lookup 14, type 16 (Chaining Context)
  lookupflag IgnoreMarks RightToLeft;
  sub @RightJoining [mim-syriac nun-syriac kaph-syriac]' lookup cv_fina;
} RightJoinFinaAlt;

#---  calt feature  ---

# Language-independent shaping

# HB PAUSE

#--- remaining subs features (salt, cvxx, liga) ---



# Lookups for user-selectable features


do let f = info("familyName");
if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

# digits
lookup Digits { # cv02
  lookupflag IgnoreMarks ;
    sub @Digits by @Digits_cv02 ;
} Digits ;
}

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

# Kaph U+071F cv15
lookup KaphAlternate { # cv15 Apparently only used in outlines so no final is needed
  lookupflag IgnoreMarks ;
    sub kaph-syriac by kaph-syriac.cv15 ;
} KaphAlternate ;

# Mim U+0721 cv17
lookup MimAlternate { # cv17 Apparently only used in outlines so no final is needed
  lookupflag IgnoreMarks ;
    sub mim-syriac by mim-syriac.cv17 ;
} MimAlternate ;

# Nun U+0722 cv18
lookup NunAlternate { # cv18 Apparently only used in outlines so no final is needed
  lookupflag IgnoreMarks ;
    sub nun-syriac by nun-syriac.cv18 ;
} NunAlternate ;

# He Yudh U+0717 U+071D cv38 (marks position)
# Used in East Syriac only
lookup HeYudhLigature {
  lookupflag IgnoreMarks ;
    sub he-syriac yudh-syriac by he_yudh-syriac ;
    sub he-syriac.fina yudh-syriac by he_yudh-syriac.fina ;
} HeYudhLigature ;

# Taw Yudh U+072C U+071D cv60=1 (ligature forms but mark is in wrong position)
# Used in East Syriac only
lookup TawYudhLigature {
  lookupflag IgnoreMarks ;
    sub taw-syriac yudh-syriac by taw_yudh-syriac;
    sub taw-syriac.fina yudh-syriac by taw_yudh-syriac.fina;
} TawYudhLigature ;


lookup TawAlaphTriangleChain { # needed for ss18
# GSUB lookup 19, type 11 (Single)
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub taw_alaph-syriac by taw_alaph-syriac.triangle;
    sub taw_alaph-syriac.fina by taw_alaph-syriac.fina.triangle;
  }
} TawAlaphTriangleChain;

lookup TawAlaphTwinedChain { # needed for ss19
# GSUB lookup 19, type 11 (Single)
  lookupflag 0;
  ifinfo(familyName, "Idiqlat|Ramsina") {
    sub taw_alaph-syriac by taw_alaph-syriac.twined;
    sub taw_alaph-syriac.fina by taw_alaph-syriac.fina.twined;
  }
} TawAlaphTwinedChain;

lookup TawAlaphLigatures { # needed for cv59
  lookupflag IgnoreMarks ;
    sub taw_alaph-syriac      from [ taw_alaph-syriac.triangle      taw_alaph-syriac.twined];
    sub taw_alaph-syriac.fina from [ taw_alaph-syriac.fina.triangle taw_alaph-syriac.fina.twined];
} TawAlaphLigatures ;

lookup TawAlaphTriangleLigatures { # needed for ss18
  lookupflag IgnoreMarks ;
    sub taw_alaph-syriac' lookup TawAlaphTriangleChain  ;
    sub taw_alaph-syriac.fina' lookup TawAlaphTriangleChain ;

} TawAlaphTriangleLigatures ;

lookup TawAlaphTwinedLigatures { # needed for ss19
  lookupflag IgnoreMarks ;
    sub taw_alaph-syriac'  lookup TawAlaphTwinedChain;
    sub taw_alaph-syriac.fina' lookup TawAlaphTwinedChain;
} TawAlaphTwinedLigatures ;

} # End of Idiqlat|Ramsina cv

# Sadhe Nun U+0728 U+0722 cv55 (marks position)
# Used in East Syriac, West Syriac, Estrangela
lookup SadheNunLigature {
  lookupflag IgnoreMarks ;
    sub sadhe-syriac nun-syriac by sadhe_nun-syriac ;
    sub sadhe-syriac.fina nun-syriac by sadhe_nun-syriac.fina ;
    sub sadhe-syriac nun-syriac.cv18 by sadhe_nun-syriac ;
    sub sadhe-syriac.fina nun-syriac.cv18 by sadhe_nun-syriac.fina ;
} SadheNunLigature ;

# Taw Alaph U+072C U+0710 cv59=2 (ligature does not form in presence of marks)
# Used in East Syriac and Estrangela


#**********************************
#  GSUB FEATURES
#**********************************

# These are intended to be arranged in the order MS & HB engines execute.

#---  rtlm feature (pass 2) ---

feature rtlm {  # Right-To-Left Mirrored Forms
     lookup Mirror;
} rtlm ;

# HB PAUSE

#---  ccmp feature (pass 3) ---

feature ccmp {  # Glyph Composition/Decomposition
    # Same for latin & syriac:
        lookup FontCheck;
    script latn;
        lookup LatinPunctuation;
    script syrc;
        lookup DecomposePthahadotted;
        lookup SeyameChain;
        lookup LamAlaphLig;
        lookup AlaphLigs;
        lookup RukkakhaSquare;
} ccmp ;

# HB PAUSE

#---  stch feature (pass 2b) ---

# HB PAUSE

#---  locl feature (pass 3) not used ---

# HB PAUSE

#---  fina feature (pass 5) ---

feature fina {  # Terminal Forms
    script syrc;
        lookup ltrFina;
} fina ;

# HB PAUSE

#---  medi feature (pass 6) ---

feature medi {  # Medial Forms
    script syrc;
        lookup ltrMedi;
} medi ;

# HB PAUSE

#---  init feature (pass 7) ---

feature init {  # Initial Forms
    script syrc;
        lookup ltrInit;
} init ;

# HB PAUSE
# These are Syriac OpenType features 

feature fin2 {  # use when the preceding base character cannot be joined to, and that preceding base character is not a 'Dalath', 'Rish', or dotless 'Dalath-Rish'
    script syrc;
        lookup ltrFinaSerOlaph;
} fin2 ;

feature fin3 {  # used when the preceding base character is a 'Dalath', 'Rish', or dotless 'Dalath-Rish'.
    script syrc;
        lookup ltrFinaESyOlaph;
} fin3 ;

feature med2 {  # used in the middle of Syriac words when the preceding base character can be joined to it.
    script syrc;
        lookup ltrMediOlaph;
} med2 ;

# HB PAUSE

#---  rlig feature (pass 8) ---

feature rlig {  # Ligatures  -- we use this because liga is done in the same pass as cvXX
    script syrc;
        lookup RishSeyame;
        lookup TawAlaph;
        lookup PeBreveBelow;
} rlig ;


# HB PAUSE

#---  calt feature (pass 9)  ---

feature calt {
# GSUB feature: Contextual Alternates
# Lookups: 1

  script syrc; # Syriac
  lookup RightJoinFinaAlt;

} calt;

# HB PAUSE

#********************
# all remaining substitution features (dlig,salt, ssxx, liga, aalt):
#********************

#---  dlig feature (pass 10) ---

feature dlig {  # Discretionary Ligatures  -- we use this because dlig is done in the same pass as cvXX
    script syrc;
        lookup SadheNunLigature;
        lookup TawAlaphLigatures;
        lookup TawYudhLigature;
        lookup HeYudhLigature;
} dlig ;

#---  liga feature (pass 10) ---

feature liga {  # Ligatures  -- we use this because liga is done in the same pass as cvXX
    script syrc;
        lookup DalathRukkakha;
        lookup MusicLigatures;
} liga ;

# HB PAUSE
#---  dlig feature (pass 10) ---

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

feature ss01 {
   featureNames {
      name 3 1 0x409 "Kaph Mim Nun alternates";
   };
   lookup ss01_lkp {
      lookupflag RightToLeft;
          sub [kaph-syriac mim-syriac nun-syriac] by [kaph-syriac.cv15 mim-syriac.cv17 nun-syriac.cv18];
   } ss01_lkp;

} ss01;

feature ss16 {
   featureNames {
      name 3 1 0x409 "He Yudh ligature";
   };
  lookup HeYudhLigature;
} ss16;

feature ss17 {
   featureNames {
      name 3 1 0x409 "Sadhe Nun ligature";
   };
  lookup SadheNunLigature;
} ss17;

feature ss18 {
   featureNames {
      name 3 1 0x409 "Taw Alaph triangle ligature";
   };
  lookup TawAlaphTriangleLigatures;
} ss18;

feature ss19 {
   featureNames {
      name 3 1 0x409 "Taw Alaph twined ligature";
   };
  lookup TawAlaphTwinedLigatures;
} ss19;

feature ss20 {
   featureNames {
      name 3 1 0x409 "Taw Yudh ligature";
   };
  lookup TawYudhLigature;
} ss20;

   }

#--- Character Variants ---

feature cv02 {  # Character Variant 2
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Digits"    ; };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Default";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "1234567890";  # English US
        };

        ParamUILabelNameID { name 3 1 0x0409 "Digit alternates" ; };
    } ;
        lookup Digits;
} cv02 ;

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

feature cv15 {  # Character Variant 15
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Kaph"; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Kaph alternate";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܟ";  # English US
        };

    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"    ; };
        ParamUILabelNameID { 
         name 3 1 0x0409 "Historic"; # English US
        };
    } ;
        lookup KaphAlternate;
} cv15 ;

feature cv17 {  # Character Variant 17
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Mim"    ;  # English US
          };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Mim alternate";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܡ";  # English US
        };

        ParamUILabelNameID { 
          name 3 1 0x0409 "Historic" ;  # English US
        };
    } ;
        lookup MimAlternate;
} cv17 ;

feature cv18 {  # Character Variant 18
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Nun"    ; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Nun alternate";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܢ";  # English US
        };

        ParamUILabelNameID { 
          name 3 1 0x0409 "Historic" ; # English US
        };
    } ;
        lookup NunAlternate;
} cv18 ;

feature cv38 {  # Character Variant 38
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "He Yudh"    ; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "He Yudh ligature";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܗܝ";  # English US
        };

        ParamUILabelNameID { 
          name 3 1 0x0409 "Ligature" ; # English US
        };
    } ;
        lookup HeYudhLigature;
} cv38 ;

}  #end do - Idiqlat|Ramsina

feature cv55 {  # Character Variant 55
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Sadhe Nun"    ; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Sadhe Nun ligature";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܨܢ";  # English US
        };

        ParamUILabelNameID { 
          name 3 1 0x0409 "Ligature" ; # English US
        };
    } ;
        lookup SadheNunLigature;
} cv55 ;

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

feature cv59 {  # Character Variant 59
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Taw Alaph"    ; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Taw Alaph ligatures";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܬܐ";  # English US
        };
        ParamUILabelNameID { 
          name 3 1 0x0409 "Triangle" ; # English US
        };
        ParamUILabelNameID { 
          name 3 1 0x0409 "Twined"   ; # English US
        };
    } ;
        lookup TawAlaphLigatures;
} cv59 ;
}  #end do - Idiqlat|Ramsina

do let f = info("familyName");
   if f.find("Idiqlat") != -1 or f.find("Ramsina") != -1; {

feature cv60 {  # Character Variant 60
    cvParameters {
        FeatUILabelNameID  { 
          name 3 1 0x0409 "Taw Yudh"    ; # English US
        };

        FeatUITooltipTextNameID {
         name 3 1 0x0409 "Taw Yudh ligature";  # English US
        };
      
        SampleTextNameID {
         name 3 1 0x0409 "ܬܝ";  # English US
        };

        ParamUILabelNameID { 
          name 3 1 0x0409 "Ligature" ; # English US
        };
    } ;
        lookup TawYudhLigature;
} cv60 ;
}  #end do - Idiqlat|Ramsina

#---  aalt feature (pass 10) ---
feature aalt {
feature ccmp;
feature dlig; # Idiqlat|Ramsina
feature cv02; # Idiqlat|Ramsina
feature cv15; # Idiqlat|Ramsina
feature cv17; # Idiqlat|Ramsina
feature cv18; # Idiqlat|Ramsina
feature cv38; # Idiqlat|Ramsina
feature cv55; # Idiqlat|Ramsina
feature cv59; # Idiqlat|Ramsina
feature cv60; # Idiqlat|Ramsina
feature ss01; # Idiqlat|Ramsina
feature ss16; # Idiqlat|Ramsina
feature ss17; # Idiqlat|Ramsina
feature ss18; # Idiqlat|Ramsina
feature ss19; # Idiqlat|Ramsina
feature ss20; # Idiqlat|Ramsina
feature calt;
} aalt;

